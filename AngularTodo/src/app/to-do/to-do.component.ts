import { Component, OnInit } from '@angular/core';
import { ToDoItem, ToDoService } from '../services/to-do.service';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-to-do',
  templateUrl: './to-do.component.html',
  styleUrls: ['./to-do.component.css'],
})

export class ToDoComponent implements OnInit {
  addTodoForm: FormGroup = new FormGroup ({
    text: new FormControl(''),
    isCompleted: new FormControl('')
  });
  toDoList: ToDoItem[] = [];
  newItem: ToDoItem = { id: '', text: 'default text', isCompleted: false };

  constructor(private formBuilder: FormBuilder, private toDoService: ToDoService) {}

  ngOnInit(): void {
    this.addTodoForm = this.formBuilder.group({
      text: ['', Validators.required],
      isCompleted: false // Default value
    })

    // Subscribe to the BehaviorSubject directly in ngOnInit
    this.toDoService.getToDoListObservable().subscribe((data) => (this.toDoList = data));
  }

   

  getToDoList(): void {
    this.toDoService.getToDoList();
  }

  addToDoItem(): void {
    if (this.addTodoForm.valid) {
      const newItem: ToDoItem = {
        id: '', // The id will be generated by the server
        text: this.addTodoForm.value.text,
        isCompleted: this.addTodoForm.value.isCompleted,
      };

      // call the service
      this.toDoService.addToDoItem(newItem);

      // reset the form
      this.addTodoForm.reset({ isCompleted: false });
    } else {
      // Check the validity of the fields and display errors if needed
      // this.validateAllFormFields(this.addTodoForm);
    }
  }


  updateToDoItem(id: string, item: ToDoItem): void {
    this.toDoService.updateToDoItem(id, item);
  }

  deleteToDoItem(id: string): void {
    this.toDoService.deleteToDoItem(id);
  }
}
